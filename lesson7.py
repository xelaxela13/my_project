"""
Функции

DRY (dont repeat yourself)

Глобальные
Локальные
Лямбда
Методы

Синтаксис создания функции (глобальной или локальной) имеет сле􏰀 дующий вид:
def function_name(parameters):
    body

DOCSTRING

def name():
    pass
"""

"""
замыкание
локальная
глобальная
builtin

В буквальном смысле, анонимная функция — это функция без имени. 
В Python анонимная функция создается с помощью ключевого слова lambda. 
lambda x, y=2: x*x + y

(lambda x, y=2: x*x + y)(2, 3)

В интерактивном интерпретаторе подчеркивание (_) привязано к последнему вычисленному выражению.
_()

Лямбда-функции часто используются с функциями более высокого порядка, 
которые принимают одну или несколько функций в качестве аргументов или возвращают одну или несколько функций.

Лямбда-функция может быть функцией более высокого порядка, принимая функцию 
(нормальную или лямбда-функцию) в качестве аргумента, как в следующем надуманном примере:

high_ord_func = lambda x, func: x + func(x)
high_ord_func(2, lambda x: x * x)
high_ord_func(2, lambda x: x + 3)


лямбда имеет следующие характеристики:

Она может содержать только выражения и не может включать операторы в свое тело.
Она пишется как одна строка исполнения.
Она не поддерживает аннотации типов.
Она может быть немедленно вызвана (IIFE).
Лямбда-функция не может содержать утверждения. В лямбда-функции такие операторы, 
как return, pass, assert или raise, вызовут исключение


(lambda x:
(x % 2 and 'odd' or 'even'))(3)
Приведенный выше пример возвращает строку «odd», если лямбда-аргумент нечетный, 
и «even», когда аргумент четный. Он распространяется на две строки, 
поскольку содержится в скобках, но остается одним выражением.
"""


def main(x, y, z=2):
    """
    Description text
    @param x: int
    @param y: int
    @param z: int
    @return: int
    >>> main(2, 2)
    8
    >>> main(2, 3)
    12
    >>> main('text', 4)
    'texttexttexttexttexttexttexttext'
    """
    return x * y * z


def checkio(number: int) -> int:
    """
    Дано положительное целое число. Вам необходимо подсчитать произведение всех цифр в этом числе, за исключением нулей.
    Для примера: Дано число 123405. Результат будет: 1*2*3*4*5=120 (не забудьте исключить нули).
    @param number:
    @return:
    """
    r = 1
    for i in str(number):
        if int(i) != 0:
            r = r * int(i)
    return r


def square(a):
    """
    Написать функцию square, принимающую 1 аргумент — сторону квадрата,
    и возвращающую 3 значения (с помощью кортежа): периметр квадрата, площадь квадрата и диагональ квадрата.
    @param a:
    @return:
    """
    return 4 * a, a ** 2, round(2 ** 0.5 * a, 2)


def arithmetic(first, second, operand):
    """
    Написать функцию arithmetic, принимающую 3 аргумента: первые 2 - числа,
    третий - операция, которая должна быть произведена над ними.
    Функция должна вернуть результат вычислений зависящий от третьего аргумент +,
    сложить их; если —, то вычесть; * — умножить; / — разделить (первое на второе).
    В остальных случаях вернуть строку "Неизвестная операция".
    @return:
    """
    return {'+': first + second,
            '-': first - second,
            '/': first / second,
            '*': first * second}.get(operand, "Неизвестная операция")


if __name__ == "__main__":
    import doctest

    doctest.testmod()

    assert checkio(123405) == 120
    assert checkio(999) == 729
    assert checkio(1000) == 1
    assert checkio(1111) == 1

    assert square(2) == (8, 4, 2.83)
    assert square(3) == (12, 9, 4.24)

    assert arithmetic(8, 4, '+') == 10
    assert arithmetic(8, 4, '-') == 4
    assert arithmetic(8, 4, '/') == 2.0
    assert arithmetic(8, 4, '*') == 32
